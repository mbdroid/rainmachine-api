FORMAT: X-1A

HOST: https://device.ip/api/4/

# RainMachine
RainMachine API version 4 for accesing [RainMachine](http://www.rainmachine.com) devices. Document revision 1.3.

Compatible devices:

- 1st generation RainMachine: `hwVer: 1.0` partial support where noted
- [RainMachine Mini 8](http://www.rainmachine.com/products/rainmachine-mini-8.html): `hwVer: 2.0` full support
- [RainMachine Touch HD](http://www.rainmachine.com/products/rainmachine-touch-hd-12.html): `hwVer: 3.0` full support

For 1st generation RainMachine the RESTful interface is accessible via HTTPS on port 443 or via HTTP on port 80. Use of HTTPS is highly recommended.

For the [RainMachine Mini 8](http://www.rainmachine.com/products/rainmachine-mini-8.html) and [RainMachine Touch HD](http://www.rainmachine.com/products/rainmachine-touch-hd-12.html) the RESTful interface is accessible via HTTPS on port 8080. HTTP access is only allowed from localhost and it's bound to port 18080.

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `GET` - Retrieves a resource or list of resources

##Typical Server Responses

- 200 `OK` - The request was successful
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 460 `Cannot Change Password` - Cannot change password
- 501 `Exception Occured` - Exception occured while processing the call
- 540 `Database Error` - Error saving data to database
- 541 `Provision Failed` - Cannot provision unit 

##Authentication

After authenticating using `POST /auth/login` [described below](#post-auth-login), additional API calls must contain the returned `access_token` as a URL parameter.

Example: `GET /api/4/program?access_token=YOUR_ACCESS_TOKEN`

# Group API versions
## GET /apiVer
Returns the software, hardware and api level versions.
*Available on 1st gen. Response: "apiVer":"4.0.0", "hwVer":"1.0", "swVer":"3.63".*
+ Response 200 (application/json)

        {
            "apiVer": "4.0.0", 
            "hwVer": 2, 
            "swVer": "4.0.219"
        }

# Group Authentication
<a name="post-auth-login"></a>
## POST /auth/login
Request auth with the device response will include a token to be used on subsequent calls
*Available on 1st gen. Response: "access_token", "statusCode", "expires_in".*
+ Request 

        {
            "pwd": "password",
            "remember": 1
        }
        
+ Response 200 (application/json)

        {
            "access_token": "fb127e22a7cd1294df47cce8acb4cd88c87eb27236b0a3be7dfd1f82", 
            "checksum": "14245b630a7affb06f7dad6004da60c0f928545e34f7e9c3dcf81ec747937bba06a1665ff61a6923fe12e8e4cc1057c89f25735f778c9b87", 
            "expiration": "Mon, 09 Dec 2019 06:43:17 GMT", 
            "statusCode": 0
        } 

## POST /auth/change
Request a password change
*Partial support on 1st gen: "newPass", "oldPass". Response: "statusCode", "message".*
+ Request

        {
            "newPass": "newPass",
            "oldPass": "oldPass" 
        }

+ Response 200 (application/json)

        {
            "access_token": "13d45261540dc77f4cd130eaca2ce8ca7d42aa674dea76a9e2d24cd7", 
            "checksum": "266ce876ab8df7f8e0d6e503a820eab39c60d1dd4a9b9f8ffcfdd746b0cf1c28868aa13dad57b4a7d1e07b0a5b8a602095dce7e291983415", 
            "expiration": "Mon, 09 Dec 2019 06:50:03 GMT", 
            "statusCode": 0
        }

## POST /auth/check
Request a password check.
*Available on 1st gen. Response: "statusCode", "message".*

+ Request

        {
            "pwd": "password"
        }

+ Response 200 (application/json)

        {
            "statusCode": 0
        } 



# Group Provision
Device provision related functions
## /provision
### GET
Get device settings
#### System
| Variable                      | Type       | Description          |
| ------------------------------|------------|--------------------- |
| `httpEnabled`                 | *boolean*  | If the HTTP server is enabled                                                          |
| `programSingleSchedule`       | *boolean*  | Allows multiple runs of same program in the same day (eg: rescheduled to another hour) |
| `mixerHistorySize`            | *integer*  | The number of days mixer will save in it's history                                     |
| `programZonesShowInactive`    | *boolean*  | List program inactive zones in queries                                                 |
| `standaloneMode`              | *boolean*  | If the device is configured but left in Access Point mode (no internet weather)        |
| `masterValveAfter`            | *integer*  | Seconds for which the master valve will open after each zone                           |
| `apiVersion`                  | *string*   | Version of software API                                                                |
| `selfTest`                    | *boolean*  | Reserved                                                                               |
| `defaultZoneWateringDuration` | *integer*  | Default seconds that a zone will be watered when started manually                      |
| `maxLEDBrightness`            | *integer*  | Maximum brightness for the front panel leds (0 - 255)                                  |
| `simulatorHistorySize`        | *integer*  | How many days to keep simulated data in database (default 0)                           |
| `masterValveBefore`           | *integer*  | Seconds for which the master valve will open before each zone                          |
| `touchProgramToRun`           | *integer*  | Which program can be run from touch interface on Mini 8 (id of program)                |
| `useRainSensor`               | *boolean*  | Set to true if you have a rain sensor connected. Will stop watering if rain is detected|
| `wizardHasRun`                | *boolean*  | Indicates if the wizard from a mobile device has been run                              |
| `waterLogHistorySize`         | *integer*  | How many days to keep watering information in database (default 365)                   |
| `netName`                     | *string*   | Device Name                                                                            |
| `touchSleepTimeout`           | *integer*  | After how many seconds of inactivity to close the leds on Mini 8                       |
| `touchAdvanced`               | *boolean*  | Activate touch panel advanced usage that allows queueing of zones on Mini 8            |
| `hardwareVersion`             | *integer*  | Hardware version of the device  (same as hwVer from /apiVer call)                      |
| `touchLongPressTimeout`       | *integer*  | After how many seconds a long touch will register automatically on Mini 8              |
| `parserDataSizeInDays`        | *integer*  | How many days of forecast parsers should get                                           |
| `programListShowInactive`     | *boolean*  | List inactive programs in queries                                                      |
| `parserHistorySize`           | *integer*  | How many past days the parsers will keep in database                                   |
| `minLEDBrightness`            | *integer*  | Minimum brightness for the front panel leds                                            |
| `minWateringDurationThreshold`| *integer*  | If calculated watering duration in seconds is lower that this the zone won't be started|
| `localValveCount`             | *integer*  | Number of valves this device has available                                             |
| `touchAPSeconds`              | *integer*  | Delay after which the user won't be alloed to login when device is in setup mode       |
| `useCommandLineArguments`     | *boolean*  | If the application was started with extra arguments                                    |
| `databasePath`                | *string*   | File system path to the databases                                                      |
| `touchCyclePrograms`          | *string*   | If the local touch interface on Mini 8 should also allow program start besides zones   |
| `zoneListShowInactive`        | *boolean*  | List inactive zones in queries                                                         |
| `zoneDuration`                | *int array*| Default list of zone durations for manual running                                      |
| `useCorrectionForPast`        | *boolean*  | If watering algorithm should also consider past weather data                           |
| `useMasterValve`              | *boolean*  | If a Master Valve is connected to Valve 1                                              |
| `maxWateringCoef`             | *integer*  | How much over-watering is allowed                                                      |

#### Location

| Variable                      | Type       | Description                                                                            |
| ------------------------------|------------|--------------------------------------------------------------------------------------- |
| `stationID`                   | *integer*  | The closest weather station ID                                                         |
| `elevation`                   | *float*    | Terrain elevation in meters                                                            |
| `doyDownloaded`               | *boolean*  | If et0 data for each day of year has been downloaded for this location                 |
| `zip`                         | *integer*  | Location ZIP  ( **obsolete** )                                                         |
| `windSensitivity`             | *float*    | Sensitivity to wind speed (as percentage in float)                                     |
| `krs`                         | *float*    | Adjustment coefficient used in ET0 ASCE formula                                        |
| `state`                       | *string*   | Location state                                                                         |
| `stationSource`               | *string*   | Where the weather station list comes from, station list or grid list                   |
| `et0Average`                  | *float*    | The average ET0 value for this location                                                |
| `latitude`                    | *float*    | Location latitude                                                                      |
| `windElevation`               | *integer*  | The elevation at which wind is measured for this location used in ET0 ASCE formula     |
| `stationName`                 | *string*   | Weather station name                                                                   |
| `wsDays`                      | *integer*  | For how many days the water savings are taken in account                               |
| `stationDownloaded`           | *boolean*  | If nearby weather stations had been downloaded                                         |
| `address`                     | *string*   | Location address                                                                       |
| `rainSensitivity`             | *float*    | How much precipitation influences ET0 formula, as percentage represented in float      |
| `timezone`                    | *string*   | Timezone description                                                                   |
| `longitude`                   | *float*    | Location longitude                                                                     |
| `name`                        | *string*   | Location name                                                                          |



+ Response 200 (application/json)

        {
        "system": {
        "httpEnabled": true, 
        "programSingleSchedule": false, 
        "mixerHistorySize": 365, 
        "programZonesShowInactive": false, 
        "standaloneMode": false, 
        "masterValveAfter": 0, 
        "apiVersion": "4.0.0", 
        "selfTest": false, 
        "defaultZoneWateringDuration": 300, 
        "maxLEDBrightness": 80, 
        "simulatorHistorySize": 0, 
        "masterValveBefore": 0, 
        "touchProgramToRun": null, 
        "useRainSensor": false, 
        "wizardHasRun": true, 
        "waterLogHistorySize": 365, 
        "netName": "Nicu-SPK2", 
        "touchSleepTimeout": 10, 
        "touchAdvanced": false, 
        "hardwareVersion": 2, 
        "touchLongPressTimeout": 3, 
        "parserDataSizeInDays": 6, 
        "programListShowInactive": true, 
        "parserHistorySize": 365, 
        "minLEDBrightness": 0, 
        "minWateringDurationThreshold": 0, 
        "localValveCount": 8, 
        "touchAuthAPSeconds": 60, 
        "useCommandLineArguments": false, 
        "databasePath": "/rainmachine-app/DB/Default", 
        "touchCyclePrograms": true, 
        "zoneListShowInactive": true, 
        "zoneDuration": [
        300, 
        300, 
        300, 
        300, 
        300, 
        300, 
        300, 
        300
        ], 
        "useCorrectionForPast": false, 
        "useMasterValve": false, 
        "maxWateringCoef": 2
        }, 
        "location": {
        "stationID": 9234, 
        "elevation": 106.87275695799999, 
        "doyDownloaded": true, 
        "zip": null, 
        "windSensitivity": 0.5, 
        "krs": 0.19, 
        "state": "Default", 
        "stationSource": "station", 
        "et0Average": 6, 
        "latitude": 37.662431199999994, 
        "windElevation": 2, 
        "stationName": "LIVERMORE MUNI AP", 
        "wsDays": 2, 
        "stationDownloaded": true, 
        "address": "Default", 
        "rainSensitivity": 0.8, 
        "timezone": "America/Los_Angeles", 
        "longitude": -121.87467890000001, 
        "name": "Pleasanton, CA, United States"
        }
        }

### POST
Sets device provision settings. See above for parameter explanation. Settings can be sent in full list, multiple keys/values or just one key/value.

+ Request (application/json)

        {
        "system": {
        "httpEnabled": true, 
        "programSingleSchedule": false, 
        "mixerHistorySize": 365, 
        "programZonesShowInactive": false, 
        "standaloneMode": false, 
        "masterValveAfter": 0, 
        "apiVersion": "4.0.0", 
        "selfTest": false, 
        "defaultZoneWateringDuration": 300, 
        "maxLEDBrightness": 80, 
        "simulatorHistorySize": 0, 
        "masterValveBefore": 0, 
        "touchProgramToRun": null, 
        "useRainSensor": false, 
        "wizardHasRun": true, 
        "waterLogHistorySize": 365, 
        "netName": "RainMachine", 
        "touchSleepTimeout": 10, 
        "touchAdvanced": false, 
        "hardwareVersion": 2, 
        "touchLongPressTimeout": 3, 
        "parserDataSizeInDays": 6, 
        "programListShowInactive": true, 
        "parserHistorySize": 365, 
        "minLEDBrightness": 0, 
        "minWateringDurationThreshold": 0, 
        "localValveCount": 8, 
        "touchAuthAPSeconds": 60, 
        "useCommandLineArguments": false, 
        "databasePath": "/rainmachine-app/DB/Default", 
        "touchCyclePrograms": true, 
        "zoneListShowInactive": true, 
        "zoneDuration": [
        300, 
        300, 
        300, 
        300, 
        300, 
        300, 
        300, 
        300
        ], 
        "useCorrectionForPast": false, 
        "useMasterValve": false, 
        "maxWateringCoef": 2
        },
        
        "location": {
        "stationID": 9234, 
        "elevation": 106.87275695799999, 
        "doyDownloaded": true, 
        "zip": null, 
        "windSensitivity": 0.5, 
        "krs": 0.19, 
        "state": "Default", 
        "stationSource": "station", 
        "et0Average": 6, 
        "latitude": 37.662431199999994, 
        "windElevation": 2, 
        "stationName": "LIVERMORE MUNI AP", 
        "wsDays": 2, 
        "stationDownloaded": true, 
        "address": "Default", 
        "rainSensitivity": 0.8, 
        "timezone": "America/Los_Angeles", 
        "longitude": -121.87467890000001, 
        "name": "Pleasanton, CA, United States"
        }
        }

+ Response 200 (application/json)

        {
            "statusCode": 0 
        }

## /provision/name
### GET
Returns device name (shortcut to provision.system.netName)
+ Response 200 (application/json)

        {"name": "RainMachine"}

## POST
Sets device name
*Available on 1st gen. Response: "statusCode", "message".*
+ Response 200 (application/json)
        
        {
            "statusCode": 0 
        }


## GET /provision/wifi
Returns current WIFI configuration 
+ Response 200 (application/json)

        {
          "interface": "wlan0", 
          "macAddress": "18:c8:e7:81:a2:6e", 
          "ipAddress": "192.168.12.126", 
          "hasClientLink": true, 
          "mode": "managed"
        }

## GET /provision/wifi/scan
Returns Access Points in range with RainMachine 
+ Response 200 (application/json)

        {
          "scanResults": [
            {
              "SSID": "LinuxConsulting", 
              "isEncrypted": true, 
              "signal": "-52", 
              "isWEP": false, 
              "BSS": "00:23:69:F9:55:D1", 
              "isWPA": false, 
              "isWPA2": true, 
              "channel": "3"
            },    
            {
              "SSID": "RainMachine", 
              "isEncrypted": false, 
              "signal": "-41", 
              "isWEP": false, 
              "BSS": "1A:C8:E7:81:9A:B8", 
              "isWPA": false, 
              "isWPA2": false, 
              "channel": "11"
            }    
          ]
        }

## POST /provision/wifi/settings
Sets the Access Point to which RainMachine will connect to and network settings such as ip, netmask, gateway unless networkType is set as dhcp
+ Response 200 (application/json)

        {
            "statusCode": 0 
        }

# Group Programs
Watering Programs, each program can contain several Zones and rules that control the irrigation
## /program
### GET
Get all watering programs defined on device
*Partial support on 1st gen: "uid", "name", "active", "startTime", "cycles", "soak", "cs_on", "delay", "delay_on", "status", "frequency", "ignoreInternetWeather", "futureField1", "freq_modified", "nextRun", "wateringTimes".*

| Variable                      | Type                | Description                                                                            |
| ------------------------------|---------------------|--------------------------------------------------------------------------------------- |
| `uid`                         | *integer*           | Program unique ID. Automatically generated when a new program is created               |
| `name`                        | *string*            | Program Name                                                                           |
| `active                       | *boolean*           | If program is not active it won't be started                                           |
| `startTime`                   | *string*            | Program start time in HH:MM format                                                     |
| `cycles`                      | *integer*           | The number of cycles that the duration of each zone will be split into                 |
| `soak`                        | *integer*           | How many seconds to wait before starting next cycle for same zone                      |
| `cs_on`                       | *boolean*           | If cycle and soak settings are enabled or not for this program                         |
| `delay`                       | *integer*           | The delay between starting next zone (to build water pressure)                         |
| `delay_on`                    | *boolean*           | If the delay between zones is enabled or not                                           |
| `status`                      | *integer*           | Watering status: 0 - not running, 1 - running, 2 - queued                                               |
| `frequency`                   | *object*            |   |
| `coef`                        | *float*             |   |
| `ignoreInternetWeather`       | *boolean*           |   |
| `futureField1`                | *integer*           |   |
| `freq_modified`               | *integer*           |   |
| `useWaterSense`               | *boolean*           |   |
| `nextRun`                     | *string*            | Next scheduled run in YYYY-MM-DD format |
| `wateringTimes`               | *array of objects*  |   |



+ Response 200 (application/json)

        {
          "programs": [
            {
              "uid": 1, 
              "name": "Program1", 
              "active": true, 
              "startTime": "06:00", 
              "cycles": 0, 
              "soak": 0, 
              "cs_on": false, 
              "delay": 0, 
              "delay_on": false, 
              "status": 0, 
              "frequency": {
                "type": 0, 
                "param": "0"
              }, 
              "coef": 0.0, 
              "ignoreInternetWeather": false, 
              "futureField1": 0, 
              "freq_modified": 0, 
              "useWaterSense": false, 
              "nextRun": "2015-06-17", 
              "wateringTimes": [
                {
                  "id": 1, 
                  "name": "Zone 1", 
                  "duration": 300, 
                  "active": true
                }, 
                {
                  "id": 2, 
                  "name": "Zone 2", 
                  "duration": 0, 
                  "active": false
                }, 
                {
                  "id": 3, 
                  "name": "Zone 3", 
                  "duration": 0, 
                  "active": false
                }, 
                {
                  "id": 4, 
                  "name": "Zone 4", 
                  "duration": 0, 
                  "active": false
                }, 
                {
                  "id": 5, 
                  "name": "Zone 5", 
                  "duration": 0, 
                  "active": false
                }, 
                {
                  "id": 6, 
                  "name": "Zone 6", 
                  "duration": 0, 
                  "active": false
                }, 
                {
                  "id": 7, 
                  "name": "Zone 7", 
                  "duration": 0, 
                  "active": false
                }, 
                {
                  "id": 8, 
                  "name": "Zone 8", 
                  "duration": 0, 
                  "active": false
                }
              ]
            }
          ]
        }
        
### POST
Create a new Program (program id will be automatically generated)
*Available on 1st gen. Response: "statusCode", "message".*

+ Response 200 (application/json)

        { "statusCode": 0 }

## GET /program/nextrun
Returns next running date/time for all active programs
*Available on 1st gen.*

+ Response 200 (application/json)

        {
            "nextRuns": [
                {
                    "pid": 31,
                    "startTime": "05:55"
                },
                {
                    "pid": 33,
                    "startTime": "11:22"
                }
            ]
        }

##/program/{id}

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
### GET
Get program with specified id
*Partial support on 1st gen: "uid", "name", "active", "startTime", "cycles", "soak", "cs_on", "delay", "delay_on", "status", "frequency", "ignoreInternetWeather", "futureField1", "freq_modified", "nextRun", "wateringTimes".*

+ Response 200 (application/json)

        {
          "uid": 1, 
          "name": "Program1", 
          "active": true, 
          "startTime": "06:00", 
          "cycles": 0, 
          "soak": 0, 
          "cs_on": false, 
          "delay": 0, 
          "delay_on": false, 
          "status": 0, 
          "frequency": {
            "type": 0, 
            "param": "0"
          }, 
          "coef": 0.0, 
          "ignoreInternetWeather": false, 
          "futureField1": 0, 
          "freq_modified": 0, 
          "useWaterSense": false, 
          "nextRun": "2015-06-04", 
          "wateringTimes": [
            {
              "id": 1, 
              "name": "Zone 1", 
              "duration": 300, 
              "active": true
            }, 
            {
              "id": 2, 
              "name": "Zone 2", 
              "duration": 0, 
              "active": false
            }, 
          ]
        }

### POST
Update program parameters with specified id
*Partial support on 1st gen: "uid", "name", "active", "startTime", "cycles", "soak", "cs_on", "delay", "delay_on", "status", "frequency", "ignoreInternetWeather", "futureField1", "freq_modified", "nextRun", "wateringTimes". Response: "statusCode", "message".*
+ Response 200 (application/json)

        { "statusCode": 0 }

## POST /program/{id}/delete
Delete Program with id
*Available on 1st gen. Response: "statusCode", "message".*

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
+ Response 200 (application/json)

        { "statusCode": 0 }
        
## POST /program/{id}/start
Start watering Program with id
*Available on 1st gen. Response: "statusCode", "message".*
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve

+ Response 200 (application/json)

        { "statusCode": 0 }

## POST /program/{id}/stop
Remove Program with id from watering queue
*Available on 1st gen.*
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the program to retrieve
    
+ Response 200 (application/json)

        { "statusCode": 0 }

# Group Zones
Irrigation zones, each zone corresponds to a valve connector on device
## GET /zone

Returns a list of *all* zones and their generic properties
*Partial support on 1st gen: "uid", "name", "state", "remaining", "type", "master".*

| Variable                      | Type                | Description                                                                            |
| ------------------------------|---------------------|--------------------------------------------------------------------------------------- |
| `uid`                         | *integer*           | Zone unique ID Usually from 1 to max number of valves                                  |
| `name`                        | *string*            | Name of the zone                                                                       |
| `state`                       | *integer*           | Watering status: 0 - not running, 1 - running, 2 - queued                              |
| `userDuration`                | *integer*           | Duration in seconds that was set by user for this zone                                 |
| `machineDuration`             | *integer*           | Duration of actual watering that was calculated by RainMachine                         |
| `remaining`                   | *integer*           | Remaining duration when watering has started                                           |
| `cycle`                       | *integer*           | The current cycle for this zone (if running from a program with cycles enabled)        |
| `noOfCycles`                  | *integer*           | Total number of cycles for this zone for running program                               |
| `restriction`                 | *boolean*           | If the zone is in any current restrictions                                             |
| `type`                        | *integer*           | Vegetation Type (**review**)                                                           |
| `master`                      | *boolean*           | If the zone is set as master valve                                                     |
| `watersense`                  | *boolean*           | If the zone is in a watersense program                                                 |

+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false, 
              "waterSense": false
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false, 
              "waterSense": false
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false, 
              "waterSense": false
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false, 
              "waterSense": false
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false, 
              "waterSense": false
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false, 
              "waterSense": false
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false, 
              "waterSense": false
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false, 
              "type": 1, 
              "master": false, 
              "waterSense": false
            }
          ]
        }
        
## GET /zone/properties
Returns advanced properties for *all* zones
*Partial support on 1st gen: "uid", "name", "active", "type", "internet", "history", "master", "before", "after".*

+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "valveid": 1, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 0, 
              "after": 0, 
              "waterSense": {
                "maxAllowedDepletion": 0.0, 
                "precipitationRate": 0.0, 
                "appEfficiency": 0.0, 
                "allowedSurfaceAcc": 0.0, 
                "rootDepth": 0, 
                "isTallPlant": 0, 
                "soilIntakeRate": 0.0, 
                "detailedMonthsKc": [
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0
                ], 
                "permWilting": 0.0, 
                "fieldCapacity": 0.0
              }
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "valveid": 2, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 0, 
              "after": 0, 
              "waterSense": {
                "maxAllowedDepletion": 0.5, 
                "precipitationRate": 40.64, 
                "appEfficiency": 0.55000000000000012, 
                "allowedSurfaceAcc": 6.35, 
                "rootDepth": 254, 
                "isTallPlant": 0, 
                "soilIntakeRate": 8.8899999999999988, 
                "detailedMonthsKc": [
                  0.41, 
                  0.46, 
                  0.52, 
                  0.56000000000000012, 
                  0.6, 
                  0.62, 
                  0.62, 
                  0.6, 
                  0.56000000000000012, 
                  0.5, 
                  0.45, 
                  0.4
                ], 
                "permWilting": 0.03, 
                "fieldCapacity": 0.2
              }
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "valveid": 3, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 0, 
              "after": 0, 
              "waterSense": {
                "maxAllowedDepletion": 0.4, 
                "precipitationRate": 40.64, 
                "appEfficiency": 0.6, 
                "allowedSurfaceAcc": 4.064, 
                "rootDepth": 205.73999999999997, 
                "isTallPlant": 0, 
                "soilIntakeRate": 3.8099999999999994, 
                "detailedMonthsKc": [
                  0.52, 
                  0.64, 
                  0.7, 
                  0.73, 
                  0.73, 
                  0.71, 
                  0.69, 
                  0.67000000000000012, 
                  0.64, 
                  0.6, 
                  0.56999999999999988, 
                  0.53
                ], 
                "permWilting": 0.03, 
                "fieldCapacity": 0.2
              }
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "valveid": 4, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 0, 
              "after": 0, 
              "waterSense": {
                "maxAllowedDepletion": 0.5, 
                "precipitationRate": 35.559999999999994, 
                "appEfficiency": 0.7, 
                "allowedSurfaceAcc": 6.604, 
                "rootDepth": 508, 
                "isTallPlant": 0, 
                "soilIntakeRate": 12.7, 
                "detailedMonthsKc": [
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012, 
                  0.55000000000000012
                ], 
                "permWilting": 0.03, 
                "fieldCapacity": 0.12
              }
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "valveid": 5, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 0, 
              "after": 0, 
              "waterSense": {
                "maxAllowedDepletion": 0.55000000000000012, 
                "precipitationRate": 35.559999999999994, 
                "appEfficiency": 0.75, 
                "allowedSurfaceAcc": 6.0959999999999988, 
                "rootDepth": 711.19999999999988, 
                "isTallPlant": 0, 
                "soilIntakeRate": 10.16, 
                "detailedMonthsKc": [
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4, 
                  0.4
                ], 
                "permWilting": 0.03, 
                "fieldCapacity": 0.16
              }
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "valveid": 6, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 0, 
              "after": 0, 
              "waterSense": {
                "maxAllowedDepletion": 0.5, 
                "precipitationRate": 5.08, 
                "appEfficiency": 0.8, 
                "allowedSurfaceAcc": 6.604, 
                "rootDepth": 635, 
                "isTallPlant": 0, 
                "soilIntakeRate": 5.08, 
                "detailedMonthsKc": [
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61, 
                  0.61
                ], 
                "permWilting": 0.03, 
                "fieldCapacity": 0.21
              }
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "valveid": 7, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 0, 
              "after": 0, 
              "waterSense": {
                "maxAllowedDepletion": 0.35, 
                "precipitationRate": 8.8899999999999988, 
                "appEfficiency": 0.65, 
                "allowedSurfaceAcc": 2.54, 
                "rootDepth": 233.68, 
                "isTallPlant": 0, 
                "soilIntakeRate": 2.54, 
                "detailedMonthsKc": [
                  0.52, 
                  0.64, 
                  0.7, 
                  0.73, 
                  0.73, 
                  0.61, 
                  0.69, 
                  0.67000000000000012, 
                  0.64, 
                  0.6, 
                  0.56999999999999988, 
                  0.53
                ], 
                "permWilting": 0.03, 
                "fieldCapacity": 0.2
              }
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "valveid": 8, 
              "ETcoef": 1, 
              "active": true, 
              "type": 1, 
              "internet": true, 
              "savings": 50, 
              "slope": 1, 
              "sun": 1, 
              "soil": 1, 
              "group_id": 0, 
              "history": true, 
              "master": false, 
              "before": 0, 
              "after": 0, 
              "waterSense": {
                "maxAllowedDepletion": 0.0, 
                "precipitationRate": 0.0, 
                "appEfficiency": 0.0, 
                "allowedSurfaceAcc": 0.0, 
                "rootDepth": 0, 
                "isTallPlant": 0, 
                "soilIntakeRate": 0.0, 
                "detailedMonthsKc": [
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0, 
                  1.0
                ], 
                "permWilting": 0.0, 
                "fieldCapacity": 0.0
              }
            }
          ]
        }


## /zone/{id}
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to water

### GET
Retrieve properties for zone with specified id.
*Partial support on 1st gen*

+ Response 200 (application/json)

        {
          "uid": 1, 
          "name": "Zone 1", 
          "state": 0, 
          "userDuration": 0, 
          "machineDuration": 0, 
          "remaining": 0, 
          "cycle": 0, 
          "noOfCycles": 0, 
          "restriction": false, 
          "type": 1, 
          "master": false, 
          "waterSense": false
        }
        
## /zone/{id}/properties
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to water

### GET
Retrieve advanced properties for zone with specified id.
*Partial support on 1st gen*

+ Response 200 (application/json)

        {
          "uid": 1, 
          "name": "Zone 1", 
          "valveid": 1, 
          "ETcoef": 1, 
          "active": true, 
          "type": 1, 
          "internet": true, 
          "savings": 50, 
          "slope": 1, 
          "sun": 1, 
          "soil": 1, 
          "group_id": 0, 
          "history": true, 
          "master": false, 
          "before": 10, 
          "after": 10
        }

### POST
Set properties for zone with id
*Partial support on 1st gen. Response: "statusCode", "message".*

+ Response 200 (application/json)

        {  }

## POST /zone/{id}/start
Start watering zone with id
*Available on 1st gen. Response: "statusCode", "message".*
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to water
    
+ Request 
        {
            "time": 60
        }

+ Response 200 (application/json)

        {}
        
## POST /zone/{id}/stop
Stop watering zone with id
*Available on 1st gen. Response: "statusCode", "message".*
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the zone to stop watering

+ Response 200 (application/json)

        { "statusCode": 0 }

# Group Watering
Watering Information and Status including data for past water usage. The past water usage statistics are split in two parts 
real data that comes from user programs (which could be daily or every 7 days) and user manual watering, and a simulated part that comes from a simulated daily program
that is simulated each day.

## GET /watering/zone
Returns status of watering on *all* zones
+ Response 200 (application/json)

        {
          "zones": [
            {
              "uid": 1, 
              "name": "Zone 1", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 2, 
              "name": "Zone 2", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 3, 
              "name": "Zone 3", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 4, 
              "name": "Zone 4", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 5, 
              "name": "Zone 5", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 6, 
              "name": "Zone 6", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 7, 
              "name": "Zone 7", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }, 
            {
              "uid": 8, 
              "name": "Zone 8", 
              "state": 0, 
              "userDuration": 0, 
              "machineDuration": 0, 
              "remaining": 0, 
              "cycle": 0, 
              "noOfCycles": 0, 
              "restriction": false
            }
          ]
        }

## GET /watering/program
Returns the running watering program or empty list if no programs are currently running.

+ Response 200 (application/json)

        {
          "programs": [
            {
              "uid": 1, 
              "name": "Program1", 
              "manual": true, 
              "userStartTime": "2015-06-03 23:43:00", 
              "realStartTime": "2015-06-03 23:43:48", 
              "status": 1
            }
          ]
        }

## GET /watering/queue
Returns the current watering queue or empty list if no watering is taking place.

+ Response 200 (application/json)

        {
          "queue": [
            {
              "availableWater": 0, 
              "realDuration": 0, 
              "running": true, 
              "uid": null, 
              "restriction": false, 
              "manual": true, 
              "pid": 1, 
              "flag": 0, 
              "machineDuration": 300.0, 
              "userDuration": 300.0, 
              "zid": 1, 
              "userStartTime": "2015-06-03 23:43:00", 
              "cycles": 1, 
              "hwZid": 1, 
              "realStartTime": "2015-06-03 23:43:48", 
              "cycle": 1
            }
          ]
        }
        
## GET /watering/past
Returns the et0 and qpf values used on the last runs of programs, including the date on which the programs started.

+ Response 200 (application/json)

        {
          "pastValues": [
            {
              "pid": 1, 
              "dateTimestamp": 1418025600, 
              "dateTime": "2014-12-08 00:00:00", 
              "used": 1, 
              "et0": 0.7508403396708584, 
              "qpf": 0
            }
          ]
        }

## GET /watering/available
Returns the available water in soil for each zone in each program for all days.

+ Response 200 (application/json)

        {
          "availableWaterValues": [
            {
              "dateTime": "2014-12-08 00:00:00", 
              "day": 1418025600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.60317710318884
            }, 
            {
              "dateTime": "2014-12-07 00:00:00", 
              "day": 1417939200, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.653164729968374
            }, 
            {
              "dateTime": "2014-12-06 00:00:00", 
              "day": 1417852800, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.40323269049864
            }, 
            {
              "dateTime": "2014-12-05 00:00:00", 
              "day": 1417766400, 
              "pid": 1, 
              "zid": 8, 
              "aw": 19.469913502450538
            }, 
            {
              "dateTime": "2014-12-03 00:00:00", 
              "day": 1417593600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }, 
            {
              "dateTime": "2014-12-02 00:00:00", 
              "day": 1417507200, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }, 
            {
              "dateTime": "2014-11-28 00:00:00", 
              "day": 1417161600, 
              "pid": 1, 
              "zid": 8, 
              "aw": 0.0
            }
          ]
        }

## GET /watering/log
Return all basic past water usage

+ Response 200 (application/json)

        {
          "waterLog": {
            "days": [
              {
                "date": "2015-06-03", 
                "realDuration": 541, 
                "dayTimestamp": 1433314800
              }
            ]
          }
        }

## GET /watering/log/{date}/{days}
Returns basic water usage data starting from specified `date` for a number of specified `days`

+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return

+ Response 200 (application/json)

        {
          "waterLog": {
            "days": [
              {
                "date": "2015-06-03", 
                "realDuration": 541, 
                "dayTimestamp": 1433314800
              }
            ]
          }
        }

## GET /watering/log/details/{date}/{days}
Returns detalied water usage starting from specified `date` for a number of specified `days`.

+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return

+ Response 200 (application/json)

        {
          "waterLog": {
            "days": [
              {
                "date": "2015-06-03", 
                "dateTimestamp": 1433314800, 
                "programs": [
                  {
                    "id": 1, 
                    "zones": [
                      {
                        "uid": 1, 
                        "flag": 0, 
                        "cycles": [
                          {
                            "id": 1, 
                            "startTime": "2015-06-03 06:00:00", 
                            "startTimestamp": 1433336400, 
                            "userDuration": 300, 
                            "machineDuration": 240.5214319229126, 
                            "realDuration": 241
                          }
                        ]
                      }
                    ]
                  }, 
                  {
                    "id": 0, 
                    "zones": [
                      {
                        "uid": 1, 
                        "flag": 0, 
                        "cycles": [
                          {
                            "id": 1, 
                            "startTime": "2015-06-03 23:43:48", 
                            "startTimestamp": 1433400228, 
                            "userDuration": 300, 
                            "machineDuration": 300, 
                            "realDuration": 300
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }
        
## GET /watering/log/simulated/{date}/{days}
Returns basic water usage data for the simulated program (doesn't actually water) starting from specified `date` for a number of specified `days`

+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return

+ Response 200 (application/json)

        {
          "waterLog": {
            "days": [
              {
                "date": "2015-06-03", 
                "realDuration": 541, 
                "dayTimestamp": 1433314800
              }
            ]
          }
        }

## GET /watering/log/simulated/details/{date}/{days}
Returns detalied water usage for the simulated program (doesn't actually water) starting from specified `date` for a number of specified `days`.

+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return

+ Response 200 (application/json)

        {
          "waterLog": {
            "days": [
              {
                "date": "2015-06-03", 
                "dateTimestamp": 1433314800, 
                "programs": [
                  {
                    "id": 1, 
                    "zones": [
                      {
                        "uid": 1, 
                        "flag": 0, 
                        "cycles": [
                          {
                            "id": 1, 
                            "startTime": "2015-06-03 06:00:00", 
                            "startTimestamp": 1433336400, 
                            "userDuration": 300, 
                            "machineDuration": 240.5214319229126, 
                            "realDuration": 241
                          }
                        ]
                      }
                    ]
                  }, 
                  {
                    "id": 0, 
                    "zones": [
                      {
                        "uid": 1, 
                        "flag": 0, 
                        "cycles": [
                          {
                            "id": 1, 
                            "startTime": "2015-06-03 23:43:48", 
                            "startTimestamp": 1433400228, 
                            "userDuration": 300, 
                            "machineDuration": 300, 
                            "realDuration": 300
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }

## POST /watering/stopall
Stops all watering in progress including zones and programs that were started.

+ Response 200 (application/json)

        { "statusCode": 0 }


# Group Restrictions   
Watering Restriction Hourly, Daily, Weekly, Monthly and Freeze Control/Rain Delay

## /restrictions/global
### GET
Returns global watering restrictions
+ Response 200 (application/json)

        {
          "hotDaysExtraWatering": false, //Enable watering over 100% of the user specified time
          "freezeProtectEnabled": false,
          "freezeProtectTemp": 2, 
          "noWaterInWeekDays": "0000000", 
          "noWaterInMonths": "000000000000", 
          "rainDelayStartTime": -1,  //Program a rain delay to take place at the specified time
          "rainDelayDuration": 0
        }

### POST
Sets global watering restrictions

+ Response 200 (application/json)

        { "statusCode": 0 }

## /restrictions/hourly
### GET
Returns defined hourly restrictions for watering

+ Response 200 (application/json)
    
        {
          "hourlyRestrictions": [
            {
              "interval": "2:0 - 3:0", 
              "dayStartMinute": 120, 
              "uid": 1, 
              "minuteDuration": 60, 
              "weekDays": "1000000"
            }
          ]
        }
        
### POST
Sets a new hourly restriction, will return a json with restriction details.

+ Response 200 (application/json)

        {
        "restriction": 
            {
            "interval": "2:0 - 3:0", 
            "dayStartMinute": 120, 
            "uid": 2, 
            "minuteDuration": 60, 
            "weekDays": "1000000"
            }, 
            "message": "OK", "statusCode": 0
        }

## POST /restrictions/hourly/{id}/delete
Removes an hourly restriction with the specified id.

+ Response 200 (application/json)

        { "statusCode": 0 }

##/restrictions/raindelay
### GET
Returns the number of seconds until the forced Rain Delay is finished
*Available on 1st gen.*
+ Response 200 (application/json)

        {
          "delayCounter": 86397
        }

### POST
Sets the number of days for which a Rain Delay is wanted, the Rain Delay will start at the time of POST request being register.
*Available on 1st gen.*

+ Response 200 (application/json)

        { "statusCode": 0 }


# Group Daily Stats
Daily Statistics and Weather
##/dailystats
### GET
Returns daily statistics about simulated watering. It has 14 historical days (older negative id) and 7 days in the future (pozitive id, id 0 is today). 
Statistics are built from mixer and simulator data. 

| Variable for Basic Stats   | Type          | Description                                                                        |
| ---------------------------|---------------|----------------------------------------------------------------------------------- |
| `id`                       | *int*         | Day offset relative to today which is 0.                                           |
| `wateringFlag`             | *int*         | See below                                                                          |
| `day`                      | *string*      | Day in YYYY-MM-DD format                                                           |
| `mint`                     | *float*       | Minimum temperature of the day                                                     |
| `maxt`                     | *float*       | Maximum temperature of the day                                                     |
| `icon`                     | *int*         | Weather icon for that day (see icon definitions)                                   |
| `percentage`               | *int*         | How much it actually waters                                                        |
| `simulatedPercentage`      | *int*         | How much it would water if a daily program would be configured                     |
| `vibration`                | *array of int*| How the watering `percetage` varies with historical and future weather predictions |
| `simulatedVibration`       | *array of int*| As above but if a daily program would be configured                                |

| Variable for Detailed Stats | Type          | Description                                         |
| ----------------------------|---------------|---------------------------------------------------- |
| `scheduledWateringTime`     | *int*         | User specified watering time for this zone          |
| `computedWateringTime`      | *int*         | Calculated watering time for this zone              |
| `availableWater`            | *float*       | Available water for this zone                       |
| `coefficient`               | *float*       | Zone watering coefficient (see zones documentation) |


| Watering Flag Value        | Description                          |
| ---------------------------|------------------------------------- |
| 0                          | Normal watering                      |
| 1                          | Interrupted by user                  |
| 2                          | Restriction Threshold                |
| 3                          | Restriction Freeze Protect           |
| 4                          | Restriction Day                      |
| 5                          | Restriction Out Of Day               |
| 6                          | Water Surplus                        |
| 7                          | Stopped by Rain Sensor               |


*Partial support on 1st gen: "vibration" not available.*

+ Response 200 (application/json)

        {
          "DailyStats": [
            {
              "id": 0, 
              "day": "2015-06-16", 
              "mint": 11.16, 
              "maxt": 29.6, 
              "icon": 0, 
              "percentage": 100, 
              "wateringFlag": 0, 
              "vibration": [
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100
              ], 
              "simulatedPercentage": 100, 
              "simulatedVibration": [
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100
              ]
            }, 
            {
              "id": 1, 
              "day": "2015-06-17", 
              "mint": 12.619999999999999, 
              "maxt": 30.99, 
              "icon": 3, 
              "percentage": 100, 
              "wateringFlag": 0, 
              "vibration": [
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100
              ], 
              "simulatedPercentage": 100, 
              "simulatedVibration": [
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100, 
                100
              ]
            }
            ]
        }

##/dailystats/{date}
###GET
Returns daily statistics about simulated watering starting from specified `date` per program per zone.
*Partial support on 1st gen: "vibration" not available.*
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
+ Response 200 (application/json)

        {
              "id": 1, 
              "day": "2014-12-02", 
              "mint": 6.9, 
              "maxt": 21.9, 
              "icon": null, 
              "percentage": 0, 
              "wateringFlag": 0, 
              "vibration": [
                56, 
                56, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0, 
                0
              ], 
              "simulatedPercentage": 16.33062599489387, 
              "simulatedVibration": [
                16
              ]
        }
        
##/dailystats/details
###GET
Returns daily statistics detauls about simulated watering starting with `date` which is optional.
*Partial support on 1st gen: "vibration" not available.*

+ Response 200 (application/json)

        {
          "DailyStatsDetails": [
            {
              "dayTimestamp": 1434438000, 
              "day": "2015-06-16", 
              "mint": 11.16, 
              "maxt": 29.6, 
              "icon": 0, 
              "programs": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 1, 
                      "scheduledWateringTime": 300, 
                      "computedWateringTime": 300, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ], 
              "simulatedPrograms": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 2, 
                      "scheduledWateringTime": 60, 
                      "computedWateringTime": 60, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ]
            }, 
            {
              "dayTimestamp": 1434524400, 
              "day": "2015-06-17", 
              "mint": 12.619999999999999, 
              "maxt": 30.99, 
              "icon": 3, 
              "programs": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 1, 
                      "scheduledWateringTime": 300, 
                      "computedWateringTime": 300, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ], 
              "simulatedPrograms": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 2, 
                      "scheduledWateringTime": 60, 
                      "computedWateringTime": 60, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ]
            }, 
            {
              "dayTimestamp": 1434610800, 
              "day": "2015-06-18", 
              "mint": 12.72, 
              "maxt": 29.74, 
              "icon": 3, 
              "programs": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 1, 
                      "scheduledWateringTime": 300, 
                      "computedWateringTime": 300, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ], 
              "simulatedPrograms": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 2, 
                      "scheduledWateringTime": 60, 
                      "computedWateringTime": 60, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ]
            }, 
            {
              "dayTimestamp": 1434697200, 
              "day": "2015-06-19", 
              "mint": 12.369999999999999, 
              "maxt": 29.02, 
              "icon": 3, 
              "programs": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 1, 
                      "scheduledWateringTime": 300, 
                      "computedWateringTime": 300, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ], 
              "simulatedPrograms": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 2, 
                      "scheduledWateringTime": 60, 
                      "computedWateringTime": 60, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ]
            }, 
            {
              "dayTimestamp": 1434783600, 
              "day": "2015-06-20", 
              "mint": 12.95, 
              "maxt": 32.22, 
              "icon": 3, 
              "programs": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 1, 
                      "scheduledWateringTime": 300, 
                      "computedWateringTime": 300, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ], 
              "simulatedPrograms": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 2, 
                      "scheduledWateringTime": 60, 
                      "computedWateringTime": 60, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ]
            }, 
            {
              "dayTimestamp": 1434870000, 
              "day": "2015-06-21", 
              "mint": 12.9, 
              "maxt": 33.4, 
              "icon": 3, 
              "programs": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 1, 
                      "scheduledWateringTime": 300, 
                      "computedWateringTime": 300, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ], 
              "simulatedPrograms": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 2, 
                      "scheduledWateringTime": 60, 
                      "computedWateringTime": 60, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ]
            }, 
            {
              "dayTimestamp": 1434956400, 
              "day": "2015-06-22", 
              "mint": 12.6, 
              "maxt": 29.8, 
              "icon": 1, 
              "programs": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 1, 
                      "scheduledWateringTime": 300, 
                      "computedWateringTime": 300, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ], 
              "simulatedPrograms": [
                {
                  "id": 1, 
                  "zones": [
                    {
                      "id": 2, 
                      "scheduledWateringTime": 60, 
                      "computedWateringTime": 60, 
                      "availableWater": 0, 
                      "coefficient": 1, 
                      "percentage": 100
                    }
                  ]
                }
              ]
            }
          ]
        }

# Group Parsers
Parsers information, data and parameters
##/parser
###GET
Returns information about all weather parsers available
+ Response 200 (application/json)

        {
          "parsers": [
            {
              "lastRun": null, 
              "uid": 1, 
              "enabled": false, 
              "custom": false, 
              "params": {
                "station": 480, 
                "useHourly": false
              }, 
              "name": "FAWN Parser"
            }, 
            {
              "lastRun": null, 
              "custom": false, 
              "enabled": false, 
              "uid": 4, 
              "name": "Simulator Parser"
            }, 
            {
              "lastRun": "2015-06-04 06:13:57", 
              "custom": false, 
              "enabled": true, 
              "uid": 3, 
              "name": "METNO Parser"
            }, 
            {
              "lastRun": null, 
              "uid": 5, 
              "enabled": false, 
              "custom": false, 
              "params": {
                "appKey": null, 
                "useProxy": false
              }, 
              "name": "ForecastIO Parser"
            }, 
            {
              "lastRun": null, 
              "uid": 7, 
              "enabled": false, 
              "custom": false, 
              "params": {
                "appKey": null, 
                "station": 2, 
                "customStation": true, 
                "historicDays": 5
              }, 
              "name": "CIMIS Parser"
            }, 
            {
              "lastRun": null, 
              "custom": false, 
              "enabled": false, 
              "uid": 6, 
              "name": "NOAA Parser"
            }, 
            {
              "lastRun": null, 
              "custom": false, 
              "enabled": false, 
              "uid": 2, 
              "name": "My Example Parser"
            }
          ]
        }

##/parser/{id}
###GET 
Returns detalied information about parser
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the parser

+ Response 200 (application/json)

        {
        "parser": {
        "lastRun": null, 
        "uid": 1, 
        "enabled": false, 
        "custom": false, 
        "params": {
            "station": 480, 
            "useHourly": false
        }, 
        "name": "FAWN Parser"
        }
        }

## GET /parser/{id}/data
Return all available parser weaher data

+ Response 200 (application/json)

        {
          "parserData": [
            {
              "forecast": {
                "processed": 1, 
                "id": 5, 
                "time": "2015-06-04 06:13:57"
              }, 
              "dailyValues": [
                {
                  "day": "2015-06-04 00:00:00", 
                  "hourlyValues": [
                    {
                      "hour": "2015-06-04 06:00:00", 
                      "temperature": null, 
                      "minTemperature": 18.600000000000001, 
                      "maxTemperature": 29.800000000000001, 
                      "rh": null, 
                      "minRh": 37.5, 
                      "maxRh": 95, 
                      "wind": null, 
                      "solarRad": null, 
                      "skyCover": null, 
                      "rain": null, 
                      "et0": null, 
                      "pop": null, 
                      "qpf": 0, 
                      "condition": 3, 
                      "pressure": null, 
                      "dewPoint": null
                    }
                ]
            }
            ]
            }
            ]
            }


## GET /parser/{id}/data/{date}
Returns parser weather data starting from specified `date` until current day

+ Response 200 (application/json)

        {
          "parserData": [
            {
              "forecast": {
                "processed": 1, 
                "id": 5, 
                "time": "2015-06-04 06:13:57"
              }, 
              "dailyValues": [
                {
                  "day": "2015-06-04 00:00:00", 
                  "hourlyValues": [
                    {
                      "hour": "2015-06-04 06:00:00", 
                      "temperature": null, 
                      "minTemperature": 18.600000000000001, 
                      "maxTemperature": 29.800000000000001, 
                      "rh": null, 
                      "minRh": 37.5, 
                      "maxRh": 95, 
                      "wind": null, 
                      "solarRad": null, 
                      "skyCover": null, 
                      "rain": null, 
                      "et0": null, 
                      "pop": null, 
                      "qpf": 0, 
                      "condition": 3, 
                      "pressure": null, 
                      "dewPoint": null
                    }
                ]
            }
            ]
            }
            ]
            }

## GET /parser/{id}/data/{date}/{days}
Returns parser weather data starting from specified `date` for a number of specified `days`
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return
    
+ Response 200 (application/json)

        {
          "parserData": [
            {
              "forecast": {
                "processed": 1, 
                "id": 5, 
                "time": "2015-06-04 06:13:57"
              }, 
              "dailyValues": [
                {
                  "day": "2015-06-04 00:00:00", 
                  "hourlyValues": [
                    {
                      "hour": "2015-06-04 06:00:00", 
                      "temperature": null, 
                      "minTemperature": 18.600000000000001, 
                      "maxTemperature": 29.800000000000001, 
                      "rh": null, 
                      "minRh": 37.5, 
                      "maxRh": 95, 
                      "wind": null, 
                      "solarRad": null, 
                      "skyCover": null, 
                      "rain": null, 
                      "et0": null, 
                      "pop": null, 
                      "qpf": 0, 
                      "condition": 3, 
                      "pressure": null, 
                      "dewPoint": null
                    }
                ]
            }
            ]
            }
            ]
            }

## POST /parser/{id}/activate
Activates or deactivates a parser. If a parser is not active it won't be run.

+ Response 200 (application/json)

        { "statusCode": 0 }

## POST /parser/{id}/params
Sets the custom parameters for a parser

+ Response 200 (application/json)

        { "statusCode": 0 }

## POST /parser/run
Forcefully runs parsers, mixer and simulator, this will delete all previous parser data for the specified parser
+ Parameters
    + id  (optional, number, ``) ... Which parser to run, empty means all parsers
    + parser (optional, bool, `True`) ... True means run parser(s), False doesn't run parser(s)
    + mixer (optional, bool, `True`) ... True means run mixer, False doesn't run mixer
    + simulator (optional, bool, `True`) ... True means run simulator, False doesn't run simulator
    
+ Response 200 (application/json)

        { "statusCode": 0 }


# Group Mixer
Mixed weather data from running parsers.
## GET /mixer
Return all available mixer data

+ Response 200 (application/json)

        {
          "mixerData": [
            {
              "forecastInfo": {
                "id": 217, 
                "time": "2015-06-03 21:26:37"
              }, 
              "dailyValues": [
                {
                  "day": "2015-06-03 00:00:00", 
                  "temperature": 15.92, 
                  "rh": 85.1, 
                  "wind": 2.37, 
                  "solarRad": null, 
                  "skyCover": null, 
                  "rain": null, 
                  "et0": null, 
                  "pop": 0, 
                  "qpf": 0, 
                  "condition": 0, 
                  "pressure": 101.17, 
                  "dewPoint": 10.6, 
                  "minTemp": 11.06, 
                  "maxTemp": 22.27, 
                  "minRH": 47.1, 
                  "maxRH": 84.75, 
                  "et0calc": 4.7355358560658312, 
                  "et0final": 4.74
                }, 
                {
                  "day": "2015-06-04 00:00:00", 
                  "temperature": 15.84, 
                  "rh": 68.59, 
                  "wind": 2.71, 
                  "solarRad": null, 
                  "skyCover": null, 
                  "rain": null, 
                  "et0": null, 
                  "pop": 3, 
                  "qpf": 0, 
                  "condition": 3, 
                  "pressure": 100.94, 
                  "dewPoint": 9.69, 
                  "minTemp": 11.06, 
                  "maxTemp": 23.19, 
                  "minRH": 42.9, 
                  "maxRH": 86.3, 
                  "et0calc": 5.1318712729042166, 
                  "et0final": 5.13
                }
            ]
            }
            ]
            }


## GET /mixer/{date}
Returns mixer data starting from specified `date` until current day

+ Response 200 (application/json)

        {
          "mixerDataByDate": [
            {
              "forecastInfo": {
                "id": 217, 
                "time": "2015-06-03 21:26:37"
              }, 
              "dailyValues": [
                {
                  "day": "2015-06-03 00:00:00", 
                  "temperature": 15.92, 
                  "rh": 85.1, 
                  "wind": 2.37, 
                  "solarRad": null, 
                  "skyCover": null, 
                  "rain": null, 
                  "et0": null, 
                  "pop": 0, 
                  "qpf": 0, 
                  "condition": 0, 
                  "pressure": 101.17, 
                  "dewPoint": 10.6, 
                  "minTemp": 11.06, 
                  "maxTemp": 22.27, 
                  "minRH": 47.1, 
                  "maxRH": 84.75, 
                  "et0calc": 4.7355358560658312, 
                  "et0final": 4.74
                }, 
                {
                  "day": "2015-06-04 00:00:00", 
                  "temperature": 15.84, 
                  "rh": 68.59, 
                  "wind": 2.71, 
                  "solarRad": null, 
                  "skyCover": null, 
                  "rain": null, 
                  "et0": null, 
                  "pop": 3, 
                  "qpf": 0, 
                  "condition": 3, 
                  "pressure": 100.94, 
                  "dewPoint": 9.69, 
                  "minTemp": 11.06, 
                  "maxTemp": 23.19, 
                  "minRH": 42.9, 
                  "maxRH": 86.3, 
                  "et0calc": 5.1318712729042166, 
                  "et0final": 5.13
                }
            ]
            }
            ]
            }

## GET /mixer/{date}/{days}
Returns mixer data starting from specified `date` for a number of specified `days`
+ Parameters
    + date (required, date, `2014-10-11`) ... Date for which the data is wanted
    + days (optional, int, `30`) ... How many days to return
    
+ Response 200 (application/json)

        {
          "mixerDataByDate": [
            {
              "forecastInfo": {
                "id": 217, 
                "time": "2015-06-03 21:26:37"
              }, 
              "dailyValues": [
                {
                  "day": "2015-06-03 00:00:00", 
                  "temperature": 15.92, 
                  "rh": 85.1, 
                  "wind": 2.37, 
                  "solarRad": null, 
                  "skyCover": null, 
                  "rain": null, 
                  "et0": null, 
                  "pop": 0, 
                  "qpf": 0, 
                  "condition": 0, 
                  "pressure": 101.17, 
                  "dewPoint": 10.6, 
                  "minTemp": 11.06, 
                  "maxTemp": 22.27, 
                  "minRH": 47.1, 
                  "maxRH": 84.75, 
                  "et0calc": 4.7355358560658312, 
                  "et0final": 4.74
                }, 
                {
                  "day": "2015-06-04 00:00:00", 
                  "temperature": 15.84, 
                  "rh": 68.59, 
                  "wind": 2.71, 
                  "solarRad": null, 
                  "skyCover": null, 
                  "rain": null, 
                  "et0": null, 
                  "pop": 3, 
                  "qpf": 0, 
                  "condition": 3, 
                  "pressure": 100.94, 
                  "dewPoint": 9.69, 
                  "minTemp": 11.06, 
                  "maxTemp": 23.19, 
                  "minRH": 42.9, 
                  "maxRH": 86.3, 
                  "et0calc": 5.1318712729042166, 
                  "et0final": 5.13
                }
            ]
            }
            ]
            }


# Group Diagnostics
Software diagnostics, logs and device status
##/diag
###GET
Returns software and device status

+ Response 200 (application/json)

            {
              "hasWifi": true, 
              "uptime": "2 days, 22:33:59", 
              "memUsage": 11992, 
              "networkStatus": true, 
              "bootCompleted": true, 
              "lastCheckTimestamp": 1433409727, 
              "wizardHasRun": true, 
              "standaloneMode": false, 
              "cpuUsage": 3.0, 
              "lastCheck": "2015-06-04 02:22:07", 
              "softwareVersion": "4.0.535", 
              "timeStatus": true, 
              "locationStatus": true, 
              "wifiMode": "managed", 
              "gatewayAddress": "192.168.12.1", 
              "weatherStatus": true
            }

##/diag/upload
###GET
Returns diagnostics upload status

+ Response 200 (application/json)

        {
          "status": 0
        }

###POST
Starts diagnostics upload to RainMachine support FTP server

+ Response 200 (application/json)

        { "statusCode": 0 }

##/diag/log
###GET
Retrieves the entire application log (**review**)
+ Response 200 (text/html)

         <html><head><title> LOG file </title></head><body> 
            <style>h1, h2, h3, h4, h5 {font-family: Arial; font-weight: normal;}
            a:link {text-decoration: none; color: #3399cc;}
            a:visited {text-decoration: none; color: #3399cc;}
            a:hover {text-decoration: underline; color: #3399cc;}
            a:active {text-decoration: none; color: #3399cc;}
            h1 {text-decoration: none; font-size:36px; color: #3399cc;}
            h3 {text-decoration: none; font-size:18px; color: #3399cc; font-weight: bold; }
            h4 {text-decoration: none; font-size:12px; color: #000; font-weight: bold; }
            h5 {color: #ccc;}
            pre {font-size: 12px;}</style> <h1>LOG file</h1><pre>2015-05-25 02:01:32,178 - INFO  - rmWirelessOpenWRT:109 - OpenWRT WIFI/Network reload/restart successful!
        </pre><br/></br><h5>Generated 02:29AM on June 04, 2015 </h5></body></html>


##/diag/log/level
###POST
Sets the log level for the application. Log level is numeric and can take values:
- 10 : Debug
- 20 : Info (default)
- 30 : Warning
- 40 : Errors
- 50 : No logging

+ Response 200 (application/json)

        { "statusCode": 0 }

##/diag/download
###GET
Retrieves an archive with logs and databases from RainMachine
*Only Available on 1st gen.*

+ Response 200 (application/zip)

            zipfile

# Group Machine
## /machine/time
### GET
Returns the time on machine
*Available on 1st gen.*

+ Response 200 (application/zip)

        { "appDate": "2015-06-04 02:33:17" }

### POST
Changes the time on machine
*Available on 1st gen.*

+ Response 200 (application/json)

        { "statusCode": 0 }
        
## /machine/update/check
### POST
Checks if there are any package updates. The status returned from /machine/update will be updated with new information.

+ Response 200 (application/json)

        { "statusCode": 0 }

## /machine/update
### GET
Returns software update status
*Available on 1st gen.*

+ Response 200 (application/json)

        {
          "lastUpdateCheckTimestamp": 1433411100, 
          "packageDetails": [
            {
              "packageName": "rainmachine-app", 
              "newVersion": "4.0.539", 
              "oldVersion": "4.0.535"
            }
          ], 
          "update": true, 
          "lastUpdateCheck": "2015-06-04 02:45:00", 
          "updateStatus": 1
        }

### POST
Starts a software update (requires a call to /machine/update/check)
*Available on 1st gen.*

+ Response 200 (application/json)

        { "statusCode": 0 }

##/machine/sysupgrade
###POST
Initiate a firmware download and install

+ Response 200 (application/json)

        { "statusCode": 0 }

## /machine/ssh
### POST
Disables/Enables SSH daemon, the daemon will also be stopped/started accordingly.

+ Response 200 (application/json)

        { "statusCode": 0 }
    
## /machine/touch
### POST
Disable/Enable touch interface. Use if you want a 3rd party application to control the leds/touch buttons

+ Response 200 (application/json)

        { "statusCode": 0 }
        
## /machine/reboot
### POST
Initiates a system reboot
*Available on 1st gen.*

+ Response 200 (application/json)

        { "statusCode": 0 }

# Group Dev
## /dev/import/parser
### POST
Installs a new parser to the device. Parsers are written in python and follow [RainMachine Parser API](http://docs.rainmachineparsers.apiary.io/). 


+ Response 200 (application/json)

        { "statusCode": 0 }
    
## /dev/import/waterlog
### POST
Imports a waterlog database from another RainMachine device

+ Response 200 (application/json)

        { "statusCode": 0 }
